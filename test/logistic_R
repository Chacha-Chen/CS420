#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 23 14:18:38 2018

@author: chenchacha
"""

import numpy as np
#from PIL import Image
import matplotlib.pyplot as plt
#from scipy.ndimage import interpolation
from sklearn.linear_model import LogisticRegression
import time
#from sklearn.preprocessing import StandardScaler
import pickle 
from sklearn import grid_search

pkl_file = open('data_test.pkl', 'rb')
X_test = pickle.load(pkl_file)
#pprint.pprint(data1)
pkl_file.close()

pkl_file = open('data_train.pkl', 'rb')
X_train = pickle.load(pkl_file)
#pprint.pprint(data1)
pkl_file.close()

y_train = np.fromfile("mnist_train_label",dtype=np.uint8)
y_test = np.fromfile("mnist_test_label",dtype=np.uint8)


t0 = time.time()
train_samples = 60000

#展平
X_train=X_train.reshape((X_train.shape[0], -1))
X_test=X_test.reshape((X_test.shape[0], -1))

#scaler = StandardScaler()
#X_train = scaler.fit_transform(X_train)
#X_test = scaler.transform(X_test)
#0.001, 0.01, 
param_grid = {'C': [ 0.1, 1, 100, 1000] }
clf = grid_search.GridSearchCV(LogisticRegression(multi_class='multinomial',
                                                  penalty='l1', 
                                                  solver='saga', 
                                                  tol=0.01), param_grid)

#clf = LogisticRegression(C=50./train_samples,
#                         multi_class='multinomial',
#                         penalty='l1', solver='saga', tol=0.01)
clf.fit(X_train, y_train)
sparsity = np.mean(clf.coef_ == 0) * 100
score = clf.score(X_test, y_test)
print('Best C % .4f' % clf.C_)
print("Sparsity with L1 penalty: %.2f%%" % sparsity)
print("Test score with L1 penalty: %.4f" % score)

#coef = clf.coef_.copy()
#plt.figure(figsize=(10, 5))
#scale = np.abs(coef).max()
#for i in range(10):
#    l1_plot = plt.subplot(2, 5, i + 1)
#    l1_plot.imshow(coef[i].reshape(45, 45), interpolation='nearest',
#                   cmap=plt.cm.RdBu, vmin=-scale, vmax=scale)
#    l1_plot.set_xticks(())
#    l1_plot.set_yticks(())
#    l1_plot.set_xlabel('Class %i' % i)
#plt.suptitle('Classification vector for...')

run_time = time.time() - t0
print('Example run in %.3f s' % run_time)
plt.show()